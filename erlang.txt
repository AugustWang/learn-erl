1、浮点数：div整数除,rem取余
2、元组：{}
3、原子：用来表示不同的非数值常量
4、字符串:一个整数列表，""括起来
5、列表：[] 存储数目可变的东西；分表头和表尾
6、变量：大写字母开头，单一赋值
7、模式匹配：Lhs=Rhs
8、f().会让shell释放所绑定过的所有变量。

顺序型编程：高阶函数fun、断言guard、记录record、case语句、if语句
模块：子句以分号分隔，最后一句以点结束；一个子句都有函数头和一个函数体
-module(moduleName).
-export([Name/N]). %%表示带N个参数的Name函数,N为函数的运算目

shell中编译和运行：
> c(moduleName).
> pwd(). %%当前工作的目录
> cd("e:/work"). %%切换到e:\work目录

同名不同目的函数：名字相同，参数数量不同

fun:匿名函数
> Z = fun(X) -> 2*X end.
> Z(5).

以fun为参数的函数：

声明-import(lists,[map/2,sum/1])意味着函数map/2是从lists模块中导入，
也就是可以用map(Fun,..)而不用lists:map(Fun,..);

声明-export([total/1])意味着函数total/1能够在模块之外调用，
只有从一个模块中导出的函数才能在模块之外调用；

简单列表处理：
lists:max([1,2,3]).
lists:reverse([1,2,3]).
lists:split(2,[3,4,5,6]).
lists:sum([3,4,7,8]).
lists:zip([2,3,4],[6,7,8]).
lists:delete(2,[4,5,6,78]).
lists:last([]).
lists:member(5,[5,6]).
lists:nth(2,[4,5,7]).
length([2,4,5]).


列表解析：[2*X || X <- L].
记号[F(X) || X <- L]代表由F(X)组成的列表，其中X是取值于列表L，
所有执行后是列表L中的每个元素X乘以2的列表

断言guard：
max(X,Y) when X>Y -> X;
max(X,Y) -> Y.

记录record:
-record(Name,{key1=val,key2=val}).%%包含在源码中or以.hrl文件保存

shell中读取记录rr(read record的缩写)：rr("records.hrl").

创建和更新记录：
X=#record_name{}.
X1 = #record_name{change}.
X2 = X1#record_name{}.

从记录中提取字段值：X2#record_name.key1.
shell释放掉记录todo：rf(todo).

case/if表达式

case表达式：
case expression of
	pattern1 [when ] -> expr;
	...
end

if表达式：
if
	Guard1 ->
		expr;
	...
end

异常：throw(Exception)、exit(Excption)、erlang:error(Exception)
1、将会抛出异常的函数包含在try...catch表达式里面
2、or把函数调用包含在catch表达式里
try Func of
	pattern [when ] -> expressions;
	...
catch
	exceptionType:exp [when ] -> exexpr;
	...
after
	afterExpressions
end

%%
try Expr
catch
	_:_ -> ...%%捕获所有可能的错误
end.

%%
try Expr
catch
	_ -> ...  %%默认错误标签是throw
end.

BIF:built-in function(内建函数):tuple_to_list/list_to_tuple...

二进制数据：二进制以一个整数或者字符序列的形式出现，用书名号括起来；<<"hello">>,<<5,66>>
1> <<"cat">> =:= <<99,97,116>>.
true

操作二进制数据的BIF：二进制数据中的总比特数必须恰好能被8整除
list_to_binary()/split_binary()/term_to_binary()/binary_to_term()...
size(<<44,55,3>>).

比特语法：M=<<X:3,Y:7,Z:6>> %%X占3bit，Y占7bit...
封包和解包：Mem = <<Red:5,Green:6,Blue:5>>.
			<<Red:5,Green:6,Blue:5>> = Mem.

小问题集锦：
1、apply(Mod,Func,[Arg1...]):向一个模块中的某个函数传递参数并调用该函数
apply(erlang,atom_to_list,[hello]).
2、属性：语法-AtomTag(..). 预定义模块属性or用户自定义属性
-module(modName).
-import(lists,[sum/1]).
-export([Name1/Arity1,..]).
-compile(Options). %%-compile(export_all).
-vsn(Version).%指定一个模块的版本
moduleName:module_info().%%attributes/compile/exports..

用户自定义：-Sometag(Value).

3、块表达式
begin
	Expr,
	...
end

4、布尔表达式：not/and/or/xor/
5、字符集
6、注释：%
7、epp预处理器：compile:file(modName,['P']).
8、转义符
9、函数引用
10、包含文件
-include(Filename).
-include_lib(Name).
11、列表操作符++/--
12、宏：?FILE/?MODULE/?LINE
-define(Constant,Replacement).
c(modName,{d,Macro}).

-ifdef(phil).
-define(TRACE(X),io:format("TRACE ~p:~p:~p ~p~n",[?FILE,?MODULE,?LINE,X])).
-else.
-define(TRACE(X),void).
-endif.

13、在模式中使用匹配操作符：
func1([{a,b,c}=Z|T]) ->
	func2(..,Z,..)

14、数值类型
传统语法：
K进制语法：K#Digits   %%16#ab58.
$语法：$C.
15、操作符优先级
16、进程字典:erase()./put(x,23)./get(x)./erase(x).
17、引用：erlang:make_ref().
18、短路布尔表达式：Expr1 andalso Expr2.
19、下划线变量：_Var/_
some_func(X) ->
	{P,Q} = some_other_func(X),
	%%io:format("",[Q]),  %%编译提示Q没有使用过。
	P.

some_func(X) ->
	{P,_Q} = some_other_func(X),%%加下划线不会报告警告
	%%io:format("",[_Q]),
	P.

编译并运行程序：
停止：q()./erlang:halt()./ctrl+break.
q(). == init:stop()
运行：erlc ModName.erl %%编译ModName.erl文件，生成ModName.beam文件；
	  erl -noshell -s ModName startName -s init stop  %%运行函数ModName:startName().

把程序当作escript脚本运行：
#！/usr/bin/env escript

使用makefile进行自动编译：

并发编程：spawn/send/receive
Pid = spawn(Fun)  %%创建一个新并发进程
Pid ! Message     %%向标识符为Pid进程发送消息
receive			  %%接收一个发给当前进程的消息
	Pat [when Guard] ->
		Expres...
end

带超时的receive
receive
	Pattern ->
		Exp;
	...
after Time ->
	Exp
end.

注册进程：
register(AnAtom,Pid).
unregister(AnAtom)
whereis(AnAtom) -> Pid | undefined
registed() -> [AnAtom::atom()]

Erlang ETS Table:(Erlang Term Storage)
1、ETS查询时间是常量，
2、ETS存储数据的格式是Tuple,
3、ETS Table由进程创建，进程销毁ETS Table也随着销毁，
   Table的拥有关系可以give_away转交给其他进程
4、一个erlang节点的ETS表的数量是有限制的，默认是1400个表，
   可以修改ERL_MAX_ETS_TABLES参数设置；
5、ETS表不在GC的管理范围
6、并发控制：所有针对一个对象的更新都被保证是原子的、隔离的
7、可以使用safe_fixtable来保证遍历过程中不出现错误，
   所有数据项只被访问一遍，
可视化查看ETS Table >tv:start().
非可视化查看 >ets:all()
>ets:i() %给出一个ETS Table的清单 包含表的类型,数据量,使用内存,所有者信息
查看my_bank表>ets:i(my_bank).
单独查看表>ets:info(my_bank).
ets:member(Tab, Key) -> true | false %看表里面是否存在键值为Key的数据项.

创建删除ETS Table插入数据：
		T = ets:new(x,[ordered_set]).
       [ ets:insert(T,{N}) || N <- lists:seq(1,10) ].
       TableID = ets:new(temp_table , []), %Create New ETS Table
        ets:insert(TableID,{1,2} ),                  % insert one Item to Table
        Result= ets:lookup(TableID ,1),
        io:format("ets:lookup(TableID ,1) Result: ~p ~n  " ,[ Result  ]),
         ets:insert(TableID,{1,3} ),
         Result2 = ets:lookup(TableID, 1 ),
         io:format("ets:lookup(TableID ,1) Result2: ~p ~n  ", [ Result2 ]),
         ets:delete(TableID),
         BagTableID =  ets:new(temp_table, [bag]),
         ets:insert(BagTableID,{1,2} ),
         ets:insert(BagTableID,{1,3} ),
         ets:insert(BagTableID,{1,4} ),
       %Note that the time order of object insertions is preserved;
       %The first object inserted with the given key will be first in the resulting list, and so on.
         Result3 = ets:lookup(BagTableID, 1 ),
         io:format("ets:lookup(BagTableID ,1) Result3: ~p ~n  ", [ Result3 ])
         %创建ETS表 注意参数named_table,我们可以通过countries原子来标识这个ETS Table
         ets:new(countries, [bag,named_table]),
        %插入几条数据
         ets:insert(countries,{yves,france,cook}),
         ets:insert(countries,{sean,ireland,bartender}),
         ets:insert(countries,{marco,italy,cook}),
         ets:insert(countries,{chris,ireland,tester}).

分页从ETS中提取数据：
match(Tab, Pattern, Limit) -> {[Match],Continuation} | '$end_of_table'
参数Limit就是每一次查询的数量限制,如果实际匹配的数据量超过了Limit就会
返回{[Match],Continuation}的结果,Match代表查询的结果集,可以推测
Continuation包含分页的信息,如果继续取下一页的结果集使用下面的方法:
match(Continuation) -> {[Match],Continuation} | '$end_of_table'

ets:new(zen_ets, [{keypos, #t.id}, named_table, public, set]),
     ets:insert(zen_ets,#t{id=2,item=2011,name="hello",iabn=1,age=24}),
    ets:insert(zen_ets,#t{id=3,item=2011,name="hello",iabn=1,age=20}),
    ets:insert(zen_ets,#t{id=4,item=2011,name="hello",iabn=1,age=34}),
    ets:insert(zen_ets,#t{id=5,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=6,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=7,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=8,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=9,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=10,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=11,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=12,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=13,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=14,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=15,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=16,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=17,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=18,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=19,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=20,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=21,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=22,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=23,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=24,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=25 ,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=26,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=27,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=28,item=2011,name="hello",iabn=1,age=299}),
      ets:insert(zen_ets,#t{id=29,item=2011,name="hello",iabn=1,age=356}),
    ets:insert(zen_ets,#t{id=30,item=2011,name="hello",iabn=1,age=278}),
    ets:insert(zen_ets,#t{id=31,item=2011,name="hello",iabn=1,age=299}),
    ets:foldl(fun(A,AC)-> io:format("Data:~p~n",[A]) end ,0,zen_ets).

18:构造基于OTP的系统
通用事件处理：

错误日志：函数调用/存储位置/错误分析
error_logger:error_msg(String). %向错误日志发送一个错误消息
error_logger:error_report(Report). %发送一个标准错误

配置错误日志：

错误日志记录器：监管报告/进程报告/崩溃报告
分析错误：rb模块读取错误日志：rb:help().

警报管理：
警报处理程序是一个遵循gen_event行为准则的回调模块；

监控树：
one_for_one:一个进程失效，监控进程就会重启它；
all_for_one:一个进程失效，所有进程都会终止(通过调用terminate/2函数)
			然后所有进程重启；

erl -sname gandalf
参数-sname gandalf的意思是在本地主机上启动一个名为gandalf的erlang节点；



io:format的格式化参数。

c 输出多个重复的字符。

1.io:format(”~2c”,”a”).

结果:aa,标识输出字母2次。

2.io:format(”~2.1c”,”a”).

结果:_a,标识输出2个字符，1个是后面跟的字母，另一个位置用空格补充，从左开始，如果是”~-2.1c”是从右侧开始。

s 打印字符串,按手册说只接受list,atom，2进制的结构。

w,p是标准输出，支持term,区别是p会对输出的数据做一些分行处理，w会显示在一行。

io_lib:format("~2.10.0B",[2])
结果[["0","2"]]
2表示总位数，10B表示10进制，0表示不足的位补0

c 表示只接受ASCII码所表示的数字,如果传的参数是 字符串"a"或者字符a  都会报错
10.5表示长度是10 打印5次
~t表示按unicode输出
f,e,g 数据类型都是float
f默认保留6为小数，不足位补0，小数位数最少是1位
e默认保留6为小数，不足位补0，小数位数最少是2位

%% vim: filetype=erlang :
